2.1-1
A = 31, 41, 59, 26, 41, 58
J = 2
key = 41
i = 1

	31 > 41 false
A[2] = 41 
A = 31, 41, 59, 26, 41, 58

J = 3
key = 59
i = 2
	41 > 59 false
A[2] = 59
A = 31, 41, 59, 26, 41, 58

J = 4
key = 26
i = 3
	59 > 26 true
	A[4] = A[3]
	A = 31, 41, 59, 59, 41, 58

i = 2
	41 > 26 true
	A[3] = A[2]
	A = 31, 41, 41, 59, 41, 58

i = 1
	31 > 26 true
	A[2] = A[1]
	A = 31, 31, 41, 59, 41, 58

i = 0
	i > 0 false
A[1] = 26
A = 26, 31, 41, 59, 41, 58

J = 5
key = 41
i = 4
	59 > 41 true
	A[5] = A[4]
	A = 26, 31, 41, 59, 59, 58

i = 3
	41 > 41 false
A[4] = 41
A = 26, 31, 41, 41, 59, 58

J = 6
key 58
i = 5
	59 > 58 true
	A[6] = A[5]
	A = 26, 31, 41, 41, 58, 59

i = 4
	41 > 59 false

A[5] = 58
J = 7

J > A.length
end

2.1-2
sort(A)
for j = 2 to A.length
	key = A[j]
	i = j -1

	while i > 0 and A[i] < key
		A[i+1] = A[i]
		i = i - 1
	A[i+1] = key

2.1-3
search(i, A)
	v = nil
	foreach a in A
		if (a == i)
			v = a
			break

return v

Loop invariant: If i exists in A then v = A[i] else i = nil
Initialisation: i = nil
Maintenance: The loop will only iterate while i = nil
Termination: If i is not assigned a value it is still nil which is ok.

2.1-4
Input: Two n-element arrays such that eash element contains either 0 or 1 
and each array as a whole represents a binary number of n bits.

Output: An n + 1 element array C representing th sum of A + B


2.2-1
O(n^3)



